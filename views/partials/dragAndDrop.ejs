<!-- 칸반보드 s -->
<div class="col" style="margin: 0; padding: 0">
  <div class="demo-container" style="padding: 60px 0 0 20px">
    <div id="kanban"></div>
  </div>
</div>
<!-- 칸반보드 e -->

<script>
  $(() => {
    // const statuses = [
    //   'Not Started',
    //   'Need Assistance',
    //   'In Progress',
    //   'Deferred',
    //   'Completed',
    // ];

    // 조회
    $(async () => {
      // 현재 URL을 가져옵니다.
      const currentUrl = window.location.href;

      // URL을 파싱하여 pathname을 얻습니다.
      const pathname = new URL(currentUrl).pathname;

      // 경로에서 숫자를 추출합니다.
      const match = pathname.match(/\/board\/(\d+)/);

      // 추출된 값이 있다면, 숫자를 가져옵니다.
      const boardId = match ? match[1] : null;

      // 리스트 조회 및 상태 배열 가져오기
      try {
        const listData = await getList(boardId);

        const statuses = listData.map((list) => list);
        const statusesId = listData.map((list) => list.id);

        // 카드 데이터 가져오기
        const cardData = await getCard(22);
        const cardDataAll = [];
        for (let i = 0; i < statusesId.length; i++) {
          const cardData = await getCard(statusesId[i]);
          console.log(cardData.length);
          for (let j = 0; j < cardData.length; j++) {
            cardDataAll.push(cardData[j]);
          }
        }
        console.log(cardDataAll);

        // Kanban 보드 렌더링
        renderKanban($('#kanban'), statuses, cardDataAll);
      } catch (error) {
        console.error('에러 발생:', error);
      }

      // Kanban 보드 렌더링 함수
      function renderKanban($container, statusList, cardData) {
        // 각 상태에 대한 목록 렌더링
        statusList.forEach((status) => {
          renderList($container, status, cardData);
        });

        // 가로 스크롤 및 정렬 기능 추가
        $container.addClass('scrollable-board').dxScrollView({
          direction: 'horizontal',
          showScrollbar: 'always',
        });

        // 목록 정렬 기능 추가
        $container.addClass('sortable-lists').dxSortable({
          filter: '.list',
          itemOrientation: 'horizontal',
          handle: '.list-title',
          moveItemOnDrop: true,
        });
      }

      // 목록 렌더링 함수
      function renderList($container, status, cardData) {
        // 새로운 목록 컨테이너 생성
        const $list = $('<div>').addClass(`list`).appendTo($container);

        // 목록 제목 렌더링
        renderListTitle($list, status.listTitle);

        // 상태에 따라 작업 필터링 및 카드 렌더링
        const listTasks = cardData.filter((card) => card.listsId === status.id);
        renderCards($list, listTasks);
      }

      // 목록 제목 렌더링 함수
      function renderListTitle($container, status) {
        $('<div>')
          .addClass('list-title')
          .addClass('dx-theme-text-color')
          .text(status)
          .appendTo($container);
      }

      // 카드 렌더링 함수
      function renderCards($container, tasks) {
        // 스크롤 가능한 컨테이너 및 카드 컨테이너 생성
        const $scroll = $('<div>').appendTo($container);
        const $items = $('<div>').appendTo($scroll);

        // 각 작업에 대한 카드 렌더링
        tasks.forEach((task) => {
          renderCard($items, task);
        });

        // 세로 스크롤 및 정렬 기능 추가
        $scroll.addClass('scrollable-list').dxScrollView({
          direction: 'vertical',
          showScrollbar: 'always',
        });

        // 카드 정렬 기능 추가
        $items.addClass('sortable-cards').dxSortable({
          group: 'tasksGroup',
          moveItemOnDrop: true,
        });
      }

      // 카드 렌더링 함수
      function renderCard($container, task) {
        // 각 작업에 대한 카드 생성
        const $item = $('<div>')
          .addClass('card')
          .addClass('dx-card')
          .addClass('dx-theme-text-color')
          .addClass('dx-theme-background-color')
          .appendTo($container);

        // 카드에 우선 순위, 제목 및 담당자 정보 추가
        $('<div>')
          .addClass('card-priority')
          .addClass(`priority-${Math.floor(Math.random() * 4) + 1}`)
          .appendTo($item);
        $('<div>').addClass('card-subject').text(task.cardName).appendTo($item);
        $('<div>').addClass('card-assignee').text(task.writer).appendTo($item);
      }
    });
  });

  async function fetchData(httpMethod, url) {
    try {
      const response = await axios[httpMethod](url);
      return response.data;
    } catch (error) {
      console.error(`${httpMethod} 요청 에러:`, error);
      throw error; // 에러를 다시 던지거나 다른 처리를 추가할 수 있습니다.
    }
  }

  async function getList(boardId) {
    try {
      const listData = await fetchData(
        'get',
        `http://localhost:3001/api/list/${boardId}`,
      );
      return listData.data;
    } catch (error) {
      // 에러 처리
      console.error('에러 발생:', error);
      throw error;
    }
  }

  async function getCard(listId) {
    try {
      const cardData = await fetchData(
        'get',
        `http://localhost:3001/api/card/list/${listId}`,
      );
      return cardData.data.cardList;
    } catch (error) {
      // 에러 처리
      console.error('에러 발생:', error);
      throw error;
    }
  }
</script>
