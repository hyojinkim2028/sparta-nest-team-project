<script
  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
  crossorigin="anonymous"
></script>
<script src="/js/main.js" type="module"></script>
<script src="/js/user.js" type="module"></script>
<script src="/js/boardDetail.js" type="module"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
  // 로그인 엑시오스
  document.addEventListener('DOMContentLoaded', function () {
    let loginFormModalBody = document.querySelector('#loginFormModalBody');
    loginFormModalBody.addEventListener('submit', (e) => {
      e.preventDefault();
      const email = document.getElementById('email').value;
      const password = document.getElementById('password').value;
      let user;
      try {
        let response = axios
          .post('/api/auth/login', {
            email: email,
            password: password,
          })
          .then(function (response) {
            console.log(response);
            user;
            console.log('로그인 되었습니다.');
            // location.href = '/api/home';
          })
          .catch(function (error) {});
      } catch (err) {
        console.error('로그인 에러:', err);
      }
    });
  });
  // 회원가입 엑시오스
  document.addEventListener('DOMContentLoaded', function () {
    let registerFromBody = document.querySelector('#registerFrom');
    registerFromBody.addEventListener('submit', (e) => {
      e.preventDefault();

      const name = document.getElementById('name').value;
      const email = document.getElementById('regEmail').value;
      const password = document.getElementById('regPassword').value;
      const passwordConfirm = document.getElementById('passwordConfirm').value;
      let user;
      try {
        let response = axios
          .post('/api/auth/register', {
            name: name,
            email: email,
            password: password,
            passwordConfirm: passwordConfirm,
          })
          .then(function (response) {
            console.log(response);
            user;
            console.log('가입 되었습니다.');
            // location.href = '/api/home';
          })
          .catch(function (error) {});
      } catch (err) {
        console.error('로그인 에러:', err);
      }
    });
  });
</script>
<script>
  document
    .querySelector('#Notification')
    .addEventListener('click', async function () {
      const received = await axios.get('/api/invite');
      receivedInvitations = received.data.data;
      document.querySelector('#infos').innerHTML = '';
      receivedInvitations.forEach((data) => {
        console.log(data.id);
        let invitations = `
        <div
        style="
          width: 100%;
          height: 60px;
          font-size: 20px;
        "
      >
        <div class="invitedInfo" data-id=${data.id}>
          ⬛️ ${data.board.boardTitle} 보드에 초대되셨습니다!
          <button class="accept">Accept</button>
          <button class="reject">Reject</button>
        </div>
      </div>
        `;

        document
          .querySelector('#infos')
          .insertAdjacentHTML('beforeend', invitations);
      });
      // 초대 승락
      const acceptBtn = document.getElementsByClassName('accept');
      for (let i = 0; i < acceptBtn.length; i++) {
        acceptBtn[i].addEventListener('click', async function () {
          const acceptId = acceptBtn[i].parentElement.getAttribute('data-id');
          console.log(acceptId);
          try {
            await axios.patch(`/api/invite/${acceptId}`, {
              invitationStatus: 'Accepted',
            });
            alert('초대를 수락하셨습니다.');
            location.reload();
          } catch (error) {
            console.log(error);
          }
        });
      }

      // 초대 거절
      const rejectBtn = document.getElementsByClassName('reject');
      for (let i = 0; i < rejectBtn.length; i++) {
        rejectBtn[i].addEventListener('click', async function () {
          const rejectId = rejectBtn[i].parentElement.getAttribute('data-id');
          try {
            await axios.patch(`/api/invite/${rejectId}`, {
              invitationStatus: 'Reject',
            });
            alert('초대를 거절하셨습니다.');
            location.reload();
          } catch (error) {
            console.log(error);
          }
        });
      }
    });
  const rejectBtn = document.getElementsByClassName('reject');
</script>
<script>
  // 효진
  let color = '#7fffd4';
  const colorData = document.getElementsByClassName('square');
  let selectedBox = colorData[0]; // 첫번째 박스가 디폴트로 선택됨

  // 클릭된 div의 색상을 저장하고 선택된 클래스를 관리하는 함수
  function getColor(event) {
    color = event.currentTarget.getAttribute('data-color');

    // 기존에 선택된 박스가 있으면 선택 클래스 제거
    if (selectedBox) {
      selectedBox.classList.remove('selected');
    }

    // 현재 클릭된 박스에 선택 클래스 추가
    event.currentTarget.classList.add('selected');
    selectedBox = event.currentTarget;
  }

  // 초기 선택된 박스에 디폴트로 selected 클래스 추가
  selectedBox.classList.add('selected');

  for (let i = 0; i < colorData.length; i++) {
    colorData[i].addEventListener('click', getColor);
  }

  async function createBoard() {
    const title = document.getElementById('title').value;
    const description = document.getElementById('description').value;
    const backgroundColor = color;

    // 클릭된 div의 색상 출력
    console.log('Selected Color:', backgroundColor);
    try {
      await axios({
        method: 'POST',
        url: '/api/boards',
        data: {
          boardTitle: title,
          description,
          backgroundColor, // 클릭된 div의 색상을 전달
        },
      })
        .then((res) => {
          alert('보드 생성 성공!');
        })
        .catch((error) => {
          console.log(error);
          throw new Error(error);
        });
    } catch (error) {
      console.log(error);
    }
  }

  const createBtn = document.getElementById('submit');
  createBtn.addEventListener('click', createBoard);
  //
  let boardId = 0;
  async function getBoards() {
    await axios({
      method: 'GET',
      url: '/api/boards',
    })
      .then((res) => {
        console.log(res);
        // 내가 생성한 보드
        const owner = res.data.data.board;
        // 초대된 보드
        const invited = res.data.data.invite;

        // 본인 생성보드 메인
        owner.forEach((data) => {
          let ownerBoard = `
          <div class="boardOne col-2" data-id=${data.id} style="cursor: pointer">
            <div class="boardOne-title text-center">${data.boardTitle}</div>
          </div>
          `;
          document
            .querySelector('.ownerBoardList')
            .insertAdjacentHTML('beforeend', ownerBoard);
        });

        // 초대된 보드 사이드바
        owner.forEach((data) => {
          let ownerBoard = `
          <li>
      <div class="nav-link text-white align-items-center" data-id=${data.id}>
        <i
          class="fa-solid fa-square-full fa-lg fa-fw"
          style="color: ${data.backgroundColor}"
        ></i>
        <span>&nbsp;&nbsp;${data.boardTitle}</span>
      </div>
    </li>
          `;
          document
            .querySelector('.ownerBoardUl')
            .insertAdjacentHTML('beforeend', ownerBoard);
        });

        // 초대된 보드 메인
        invited.forEach((data) => {
          let invitedBoard = `
          <div class="boardOne col-2" data-id=${data.board.id} style="cursor: pointer">
            <div class="boardOne-title text-center">${data.board.boardTitle}</div>
          </div>
          `;
          document
            .querySelector('.invitedBoardList')
            .insertAdjacentHTML('beforeend', invitedBoard);
        });

        // 초대된 보드 사이드바
        invited.forEach((data) => {
          let invitedBoard = `
          <li>
      <div class="nav-link text-white align-items-center" data-id=${data.board.id}>
        <i
          class="fa-solid fa-square-full fa-lg fa-fw"
          style="color: ${data.board.backgroundColor}"
        ></i>
        <span>&nbsp;&nbsp;${data.board.boardTitle}</span>
      </div>
    </li>
          `;
          document
            .querySelector('.invitedBoardUl')
            .insertAdjacentHTML('beforeend', invitedBoard);
        });

        const selectedBoard = document.getElementsByClassName('boardOne');
        for (let i = 0; i < selectedBoard.length; i++) {
          selectedBoard[i].addEventListener('click', function () {
            boardId = selectedBoard[i].getAttribute('data-id');
            window.location.href = `board/${boardId}`;
          });
        }
      })
      .catch((error) => {
        console.log(error);
        throw new Error(error);
      });
  }
  getBoards(); //axios 쓸때 'DOMContentLoaded' 사용해야 페이지가 전부 로드 된 뒤에 서버에 연결
  //시켜준다.
</script>
