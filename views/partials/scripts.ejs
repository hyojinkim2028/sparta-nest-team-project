<script
  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
  crossorigin="anonymous"
></script>
<script src="/js/main.js" type="module"></script>
<script src="/js/user.js" type="module"></script>
<script src="/js/user.js" type="module"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
  // 로그인 엑시오스
  document.addEventListener('DOMContentLoaded', function () {
    let loginFormModalBody = document.querySelector('#loginFormModalBody');
    loginFormModalBody.addEventListener('submit', (e) => {
      e.preventDefault();
      const email = document.getElementById('email').value;
      const password = document.getElementById('password').value;
      let user;
      try {
        let response = axios
          .post('/api/auth/login', {
            email: email,
            password: password,
          })
          .then(function (response) {
            console.log(response);
            user;
            console.log('로그인 되었습니다.');
            // location.href = '/api/home';
          })
          .catch(function (error) {});
      } catch (err) {
        console.error('로그인 에러:', err);
      }
    });
  });
  // 회원가입 엑시오스
  document.addEventListener('DOMContentLoaded', function () {
    let registerFromBody = document.querySelector('#registerFrom');
    registerFromBody.addEventListener('submit', (e) => {
      e.preventDefault();

      const name = document.getElementById('name').value;
      const email = document.getElementById('regEmail').value;
      const password = document.getElementById('regPassword').value;
      const passwordConfirm = document.getElementById('passwordConfirm').value;
      let user;
      try {
        let response = axios
          .post('/api/auth/register', {
            name: name,
            email: email,
            password: password,
            passwordConfirm: passwordConfirm,
          })
          .then(function (response) {
            console.log(response);
            user;
            console.log('가입 되었습니다.');
            // location.href = '/api/home';
          })
          .catch(function (error) {});
      } catch (err) {
        console.error('로그인 에러:', err);
      }
    });
  });
</script>
<script>
  // 효진
  let color = '#7fffd4';
  const colorData = document.getElementsByClassName('square');
  let selectedBox = colorData[0]; // 첫번째 박스가 디폴트로 선택됨

  // 클릭된 div의 색상을 저장하고 선택된 클래스를 관리하는 함수
  function getColor(event) {
    color = event.currentTarget.getAttribute('data-color');

    // 기존에 선택된 박스가 있으면 선택 클래스 제거
    if (selectedBox) {
      selectedBox.classList.remove('selected');
    }

    // 현재 클릭된 박스에 선택 클래스 추가
    event.currentTarget.classList.add('selected');
    selectedBox = event.currentTarget;
  }

  // 초기 선택된 박스에 디폴트로 selected 클래스 추가
  selectedBox.classList.add('selected');

  for (let i = 0; i < colorData.length; i++) {
    colorData[i].addEventListener('click', getColor);
  }

  async function createBoard() {
    const title = document.getElementById('title').value;
    const description = document.getElementById('description').value;
    const backgroundColor = color;

    // 클릭된 div의 색상 출력
    console.log('Selected Color:', backgroundColor);
    try {
      await axios({
        method: 'POST',
        url: '/api/boards',
        data: {
          boardTitle: title,
          description,
          backgroundColor, // 클릭된 div의 색상을 전달
        },
      })
        .then((res) => {
          alert('보드 생성 성공!');
        })
        .catch((error) => {
          console.log(error);
          throw new Error(error);
        });
    } catch (error) {
      console.log(error);
    }
  }

  const createBtn = document.getElementById('submit');
  createBtn.addEventListener('click', createBoard);
  //
  let boardId = 0;
  async function getBoards() {
    await axios({
      method: 'GET',
      url: '/api/boards',
    })
      .then((res) => {
        // 내가 생성한 보드
        const owner = res.data.data.board;
        console.log(owner);
        // 초대된 보드
        const invited = res.data.data.invite;

        // 본인 생성보드 메인
        owner.forEach((data) => {
          let ownerBoard = `
          <div class="boardOne col-2" data-id=${data.id} style="cursor: pointer">
            <div class="boardOne-title text-center">${data.boardTitle}</div>
          </div>
          `;
          document
            .querySelector('.ownerBoardList')
            .insertAdjacentHTML('beforeend', ownerBoard);
        });

        // 초대된 보드 사이드바
        owner.forEach((data) => {
          let ownerBoard = `
          <li>
      <div class="nav-link text-white align-items-center" data-id=${data.id}>
        <i
          class="fa-solid fa-square-full fa-lg fa-fw"
          style="color: ${data.backgroundColor}"
        ></i>
        <span>&nbsp;&nbsp;${data.boardTitle}</span>
      </div>
    </li>
          `;
          document
            .querySelector('.ownerBoardUl')
            .insertAdjacentHTML('beforeend', ownerBoard);
        });

        // 초대된 보드 메인
        invited.forEach((data) => {
          let invitedBoard = `
          <div class="boardOne col-2" data-id=${data.board.id} style="cursor: pointer">
            <div class="boardOne-title text-center">${data.board.boardTitle}</div>
          </div>
          `;
          document
            .querySelector('.invitedBoardList')
            .insertAdjacentHTML('beforeend', invitedBoard);
        });

        // 초대된 보드 사이드바
        invited.forEach((data) => {
          let invitedBoard = `
          <li>
      <div class="nav-link text-white align-items-center" data-id=${data.board.id}>
        <i
          class="fa-solid fa-square-full fa-lg fa-fw"
          style="color: ${data.board.backgroundColor}"
        ></i>
        <span>&nbsp;&nbsp;${data.board.boardTitle}</span>
      </div>
    </li>
          `;
          document
            .querySelector('.invitedBoardUl')
            .insertAdjacentHTML('beforeend', invitedBoard);
        });

        const selectedBoard = document.getElementsByClassName('boardOne');
        for (let i = 0; i < selectedBoard.length; i++) {
          selectedBoard[i].addEventListener('click', function () {
            boardId = selectedBoard[i].getAttribute('data-id');
            window.location.href = `board/${boardId}`;
            // console.log(boardId);
          });
        }
      })
      .catch((error) => {
        console.log(error);
        throw new Error(error);
      });
  }
  getBoards();

  console.log(boardId);
  //axios 쓸때 'DOMContentLoaded' 사용해야 페이지가 전부 로드 된 뒤에 서버에 연결
  //시켜준다.

  //

  //cardDetail 은지
  document.addEventListener('DOMContentLoaded', function () {
    const saveCardDetail = document.querySelector('#saveCardDetail');

    //공개할 멤버 검색버튼 누르면 유저 찾아서 아래에 표시해주기.
    const availableMemberBtn = document.getElementById('availableMemberBtn');
    const workersSearchBtn = document.getElementById('workersSearchBtn');

    //공개할 멤버 아이디
    let findAvailableUserIdArr = [];

    //작업자 아이디
    let findWorkerIdArr = [];

    //공개할 멤버 검색.
    availableMemberBtn.addEventListener('click', async (e) => {
      const cardAvailableMembers =
        document.getElementById('availableMembers').value;
      console.log('cardAvailableMembers', cardAvailableMembers);
      const findAvailableUserId = await axios.get('/api/user', {
        params: { name: cardAvailableMembers },
      });
      console.log('findAvailableUserId', findAvailableUserId.data.data);

      if (findAvailableUserId.data.data) {
        document.getElementById('findUserName').innerText +=
          findAvailableUserId.data.data.name + ', ';
        console.log('findAvailableUserIdArr', findAvailableUserIdArr);
        return findAvailableUserIdArr.push(findAvailableUserId.data.data.id);
      } else {
        alert('없는 멤버를 검색하셧습니다.');
      }
    });

    //담당자를 검색.
    workersSearchBtn.addEventListener('click', async (e) => {
      const workMembers = document.getElementById('workers').value;
      console.log('workMembers', workMembers);
      const findWorkerId = await axios.get('/api/user', {
        params: { name: workMembers },
      });
      console.log('findWorkerId', findWorkerId.data.data);

      if (findWorkerId.data.data) {
        document.getElementById('findWorkerName').innerText +=
          findWorkerId.data.data.name + ', ';
        console.log('findWorkerIdArr', findWorkerIdArr);
        return findWorkerIdArr.push(findWorkerId.data.data.id);
      } else {
        alert('없는 멤버를 검색하셧습니다.');
      }
    });

    //카드색깔 보여주기
    const cardColors = document.querySelectorAll('.dropdown-item');
    let choiceColor;

    //카드 색깔 클릭이벤트 등록하기
    cardColors.forEach((color) => {
      console.log('컬러이벤트등록', color);
      color.addEventListener('click', function (e) {
        console.log('당신의 선택은?', e.target.parentNode.id);
        choiceColor = '';
        choiceColor = e.target.parentNode.id;
        return changeColorStatus(choiceColor);
      });
    });

    //카드 색깔 선택시 유저에게 보여주기.
    function changeColorStatus(choiceColor) {
      if (!choiceColor)
        alert('색상이 제대로 선택되지 않았습니다. 다시 선택해 주세요.');
      else {
        const choiceColorBtn = document.getElementById('choiceBackgroundColor');
        const checkChoiceColor = document.getElementById('checkChoiceColor');

        return (checkChoiceColor.style.backgroundColor = `#${choiceColor}`);
      }
    }

    //기간 데이터 가져오기.
    let date = {};
    const dateSaveBtn = document.getElementById('dateSaveBtn');
    dateSaveBtn.addEventListener('click', (e) => {
      const cardStartDate = document.getElementById('startDate').value;
      const cardEndDate = document.getElementById('endDate').value;
      const cardEndTime = document.getElementById('endTime').value;

      if (
        isValidDate(cardStartDate) &&
        isValidDate(cardEndDate) &&
        isValidTime(cardEndTime)
      ) {
        console.log('date', {
          startDate: cardStartDate,
          endDate: cardEndDate,
          endTime: cardEndTime,
        });
        return (date = {
          startDate: cardStartDate,
          endDate: cardEndDate,
          endTime: cardEndTime,
        });
      } else {
        alert('유효하지 않은 날짜/시간 을 입력하셨습니다.');
      }
    });

    //유효한 날짜인지 검증하는 로직
    const isValidDate = (date) => {
      const dateParsing = new Date(date);
      return dateParsing instanceof Date;
    };

    //유효한 시간인지 검증하는 로직
    const isValidTime = (time) => {
      const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/;
      return timeRegex.test(time);
    };

    //카드 저장하기 버튼 누르면
    saveCardDetail.addEventListener('click', (e) => {
      e.preventDefault();
      console.log('date', date);

      const cardTitle = document.getElementById('cardTitleInput').value;
      const cardDescription = document.getElementById('cardDescription').value;

      //주완님 코멘트 저장.
      const cardComments = document.getElementById('cardComments').value;

      //카드 생성하기 요청
      let listId = 1;
      axios
        .post(`/api/card/list/${listId}`, {
          cardName: cardTitle,
          cardDescription: cardDescription,
          allowMembers: findAvailableUserIdArr,
          workers: findWorkerIdArr,
          cardColor: choiceColor,
          startDate: date.startDate,
          endDate: date.endDate,
          endTime: date.endTime,
        })
        .then((response) => {
          console.log(response);
          console.log('카드 생성이 완료되었습니다.');
        })
        .catch((error) => {
          console.log('err', err);
        });
    });
  });
</script>
<script>
  const currentUrl = String(window.location.href);
  currentUrl.split('/').pop();

  console.log(currentUrl.split('/').pop());
</script>
