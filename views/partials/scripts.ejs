<script
  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
  crossorigin="anonymous"
></script>
<script src="/js/main.js" type="module"></script>
<script src="/js/user.js" type="module"></script>
<script src="/js/user.js" type="module"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
  // 로그인 엑시오스
  document.addEventListener('DOMContentLoaded', function () {
    let loginFormModalBody = document.querySelector('#loginFormModalBody');
    loginFormModalBody.addEventListener('submit', (e) => {
      e.preventDefault();
      const email = document.getElementById('email').value;
      const password = document.getElementById('password').value;
      let user;
      try {
        let response = axios
          .post('/api/auth/login', {
            email: email,
            password: password,
          })
          .then(function (response) {
            console.log(response);
            console.log('로그인 되었습니다.');
            location.href = '/api/home';
          })
          .catch(function (error) {});
      } catch (err) {
        console.error('로그인 에러:', err);
      }
    });
  });
</script>
<script>
  // 효진
  let color = '#7fffd4';
  const colorData = document.getElementsByClassName('square');
  let selectedBox = colorData[0]; // 첫번째 박스가 디폴트로 선택됨

  // 클릭된 div의 색상을 저장하고 선택된 클래스를 관리하는 함수
  function getColor(event) {
    color = event.currentTarget.getAttribute('data-color');

    // 기존에 선택된 박스가 있으면 선택 클래스 제거
    if (selectedBox) {
      selectedBox.classList.remove('selected');
    }

    // 현재 클릭된 박스에 선택 클래스 추가
    event.currentTarget.classList.add('selected');
    selectedBox = event.currentTarget;
  }

  // 초기 선택된 박스에 디폴트로 selected 클래스 추가
  selectedBox.classList.add('selected');

  for (let i = 0; i < colorData.length; i++) {
    colorData[i].addEventListener('click', getColor);
  }

  async function createBoard() {
    const title = document.getElementById('title').value;
    const description = document.getElementById('description').value;
    const backgroundColor = color;

    // 클릭된 div의 색상 출력
    console.log('Selected Color:', backgroundColor);
    try {
      await axios({
        method: 'POST',
        url: '/api/boards',
        data: {
          boardTitle: title,
          description,
          backgroundColor, // 클릭된 div의 색상을 전달
        },
      })
        .then((res) => {
          alert('보드 생성 성공!');
        })
        .catch((error) => {
          console.log(error);
          throw new Error(error);
        });
    } catch (error) {
      console.log(error);
    }
  }

  const createBtn = document.getElementById('submit');
  createBtn.addEventListener('click', createBoard);
  //
  let boardId = 0;
  async function getBoards() {
    await axios({
      method: 'GET',
      url: '/api/boards',
    })
      .then((res) => {
        // 내가 생성한 보드
        const owner = res.data.data.board;
        console.log(owner);
        // 초대된 보드
        const invited = res.data.data.invite;

        // 본인 생성보드 메인
        owner.forEach((data) => {
          let ownerBoard = `
          <div class="boardOne col-1" data-id=${data.id} style="cursor: pointer; background: ${data.backgroundColor}99">
            <div class="boardOne-title text-center">${data.boardTitle}</div>
          </div>
          `;
          document
            .querySelector('.ownerBoardList')
            .insertAdjacentHTML('beforeend', ownerBoard);
        });

        // 초대된 보드 사이드바
        owner.forEach((data) => {
          let ownerBoard = `
          <li>
      <div class="nav-link text-white align-items-center" data-id=${data.id}>
        <i
          class="fa-solid fa-square-full fa-lg fa-fw"
          style="color: ${data.backgroundColor}"
        ></i>
        <span>&nbsp;&nbsp;${data.boardTitle}</span>
      </div>
    </li>
          `;
          document
            .querySelector('.ownerBoardUl')
            .insertAdjacentHTML('beforeend', ownerBoard);
        });

        // 초대된 보드 메인
        invited.forEach((data) => {
          let invitedBoard = `
          <div class="boardOne col-2" data-id=${data.board.id} style="cursor: pointer">
            <div class="boardOne-title text-center">${data.board.boardTitle}</div>
          </div>
          `;
          document
            .querySelector('.invitedBoardList')
            .insertAdjacentHTML('beforeend', invitedBoard);
        });

        // 초대된 보드 사이드바
        invited.forEach((data) => {
          let invitedBoard = `
          <li>
      <div class="nav-link text-white align-items-center" data-id=${data.board.id}>
        <i
          class="fa-solid fa-square-full fa-lg fa-fw"
          style="color: ${data.board.backgroundColor}"
        ></i>
        <span>&nbsp;&nbsp;${data.board.boardTitle}</span>
      </div>
    </li>
          `;
          document
            .querySelector('.invitedBoardUl')
            .insertAdjacentHTML('beforeend', invitedBoard);
        });

        const selectedBoard = document.getElementsByClassName('boardOne');
        for (let i = 0; i < selectedBoard.length; i++) {
          selectedBoard[i].addEventListener('click', function () {
            boardId = selectedBoard[i].getAttribute('data-id');
            window.location.href = `board/${boardId}`;
            // console.log(boardId);
          });
        }
      })
      .catch((error) => {
        console.log(error);
        throw new Error(error);
      });
  }
  getBoards();

  console.log(boardId);
  //axios 쓸때 'DOMContentLoaded' 사용해야 페이지가 전부 로드 된 뒤에 서버에 연결
  //시켜준다.
</script>
<script>
  const currentUrl = String(window.location.href);
  currentUrl.split('/').pop();

  console.log(currentUrl.split('/').pop());
</script>
<script>
  // 주완 - 카드안의 댓글 기능

  // 특정 카드를 누르면 나오는 모달의 상세 및 댓글
  document.addEventListener('DOMContentLoaded', function () {
    const cardmodalButtons = document.querySelectorAll(".card-btn");
    async function getComments (cardId) {
      await axios
      .get(`/api/cards/${cardId}/comments`)
      .then((res) => {
          console.log(res);
          for (el of res.data.data) {
            const eachComment = `            
              <div class="comments">
                <div class="commentsInfo"><b>@${el.userName}</b> <span>${el.updated_at}</span></div>
                <div class="commentsAndBtn">
                  <div style="width: 70%;">${el.content}</div> 
                  <button type="button" class="commentsDelete btn btn-light"  style="width: 7%; margin-left: auto;" data-comment-id="${el.id}" data-card-id="${el.card_id}">삭제</button>
                </div>
              </div>
              `;
            document
            .querySelectorAll('.inLeftTextArea')[1]
            .insertAdjacentHTML('beforeend', eachComment);
          }
        })
      .catch((error) => {
        console.log(error);
        throw new Error(error);
      });
    }

    cardmodalButtons.forEach(function (btn) {
      btn.addEventListener('click', function () {
        const cardId = btn.getAttribute("data-card-id");
        getComments(cardId);
      });
    });
  });

// 댓글을 적고 저장을 누르면 댓글이 저장
document.addEventListener('DOMContentLoaded', function () {
  const submitButton = document.getElementById('submit-comment');
  const cardId = submitButton.getAttribute("data-card-id"); //카드마다 data-card-iddp id를 넣어야함
  async function submitComment () {
    const content = document.getElementById('recipient-name').value;
    await axios
        .post(`/api/cards/${cardId}/comments`, {
          content: content,
      })
        .then((res) => {
          console.log(res);
        })
        .catch((error) => {
          console.log(error);
          throw new Error(error);
        });
  };
  submitButton.addEventListener('click', submitComment);
});
// 각 댓글의 수정을 누르면 댓글이 수정
    document.addEventListener('DOMContentLoaded', function () {

  });

// 각 댓글의 삭제을 누르면 댓글이 삭제
  document.addEventListener('DOMContentLoaded', function () {
    const deleteButtons = document.querySelectorAll(".commentsDelete");
    async function deleteComment (cardId, commentId) {
      await axios
        .delete(`/api/cards/${cardId}/comments/${commentId}`)
        .then((res) => {
          console.log(res);
        })
        .catch((error) => {
          console.log(error);
          throw new Error(error);
        });
    };

    deleteButtons.forEach(function (btn) {
      btn.addEventListener('click', function () {
        const commentId = btn.getAttribute("data-comment-id");
        const cardId = btn.getAttribute("data-card-id")
        deleteComment(cardId, commentId);
      });
    });
  });
</script>
